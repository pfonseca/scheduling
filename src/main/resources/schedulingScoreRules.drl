
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import com.atech.optimization.scheduling.domain.Dock;
import com.atech.optimization.scheduling.domain.DockAssignment;
import com.atech.optimization.scheduling.domain.OperationType;
import com.atech.optimization.scheduling.domain.Period;
import com.atech.optimization.scheduling.domain.Vehicle;
import com.atech.optimization.scheduling.domain.OperationType;
import com.atech.optimization.scheduling.domain.Document;

import java.lang.System;

import java.util.HashSet;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Dock conflict"
    when
        $leftAssignment : DockAssignment(dock != null, $leftId : id, $dock : dock)
        $rightAssignment : DockAssignment(calculateOverlap($leftAssignment) > 0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, - $rightAssignment.calculateOverlap($leftAssignment));
end

rule "Document conflict"
    when
        $assignment : DockAssignment(document != null)
        exists DockAssignment(id != $assignment.id, document == $assignment.document)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Period validation"
    when
        exists DockAssignment(period != null, period.dock != dock)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Document type"
    when
    		exists DockAssignment(dock != null, document != null, dock.isDocumentSupported(document) == false)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Order Documents"
    when
    		$vehicle : Vehicle()
    		$documentDelivery: Document(vehicle == $vehicle, operationType == OperationType.DELIVERY)
    		$dockAssignmentDelivery : DockAssignment(document == $documentDelivery)
    		$documentPickup: Document(vehicle == $vehicle, operationType == OperationType.PICKUP)
    		exists(DockAssignment(document == $documentPickup, period.startingMinuteOfDay < $dockAssignmentDelivery.period.startingMinuteOfDay))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Dock Cost"
    when
        $vehicle : Vehicle()
        $set : HashSet ( ) from accumulate(
        		DockAssignment(document != null, document.vehicle == $vehicle, $dock: dock),
        		init ( HashSet docksSet = new HashSet<Dock>(); ),
        		action ( docksSet.add($dock); ),
        		result ( docksSet )
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $set.size());
end

rule "Min hour"
    when
    		$vehicle : Vehicle()
    		$dockAssignment : DockAssignment(period != null, document != null, document.vehicle == $vehicle, $period: period)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, - $dockAssignment.getPeriod().getStartingMinuteOfDay());
end
